# this config file contains some common settings for the AHEAD benchmarking, used by several scripts

if [[ -z ${AHEAD_COMMON_CONF+x} ]]; then
	echo "sourcing common.conf"
	export AHEAD_COMMON_CONF=""
	SOURCE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null && pwd )"

	######################################################
	# The following are settings for the modular inverse #
	######################################################
	MI_SCRIPTFILE="modulo_inverse.m"

	######################################################
	# The following are settings for executing AHEAD     #
	######################################################
	[[ -z ${AHEAD_DATE+x} ]] && export AHEAD_DATE="$(date '+%Y-%m-%d_%H-%M')"
	if [[ $(which systemd-detect-virt &>/dev/null) ]]; then
		[[ systemd-detect-virt ]] && export AHEAD_IS_VM=1 || export AHEAD_IS_VM=0
	else
		[[ $(dmesg | grep "Hypervisor detected") ]] && export AHEAD_IS_VM=1 || export AHEAD_IS_VM=0
	fi
	export AHEAD_PREVIOUS_DATE_FILE="${SOURCE_DIR}/date.prev"
	# Let's simply only enable PCM when not in a virtual machine, because the dependant code will not run therein anyways
	export AHEAD_USE_PCM=$((AHEAD_IS_VM == 1 ? 0 : 1))
	export AHEAD_DB_PATH="${SOURCE_DIR}/database"
	export AHEAD_SCALEFACTOR_PREFIX="sf-"
	export AHEAD_SCALEFACTOR_MIN="1"
	export AHEAD_SCALEFACTOR_MAX="1"

	export AHEAD_BUILD_BASE_DIR="${SOURCE_DIR}/build"
	export AHEAD_BUILD_DEBUG_DIR="${AHEAD_BUILD_BASE_DIR}/Debug"
	export AHEAD_BUILD_RELEASE_DIR="${AHEAD_BUILD_BASE_DIR}/Release"

	export AHEAD_MINBFW_SUFFIX="-minbfw"
	export AHEAD_MINBFW_SCALEFACTOR="1"
	export AHEAD_MINBFW_MIN="1"
	export AHEAD_MINBFW_MAX="3"
	export AHEAD_MINBFW_CMDARG="--AN-minbfw"

	export AHEAD_PAPER_PATH="${SOURCE_DIR}/paper"
	export AHEAD_PAPER_RESULTS="${AHEAD_PAPER_PATH}/results"
	export AHEAD_PAPER_RESULTS_SSB="${AHEAD_PAPER_RESULTS}/ssb"
	export AHEAD_PAPER_RESULTS_MB="${AHEAD_PAPER_RESULTS}/microbenchmarks"
	export AHEAD_PAPER_RESULTS_MI="${AHEAD_PAPER_RESULTS}/microbenchmarks/ext_euclidean"

	######################################################
	# The following are the names of the scripts to call #
	######################################################
	export AHEAD_SCRIPT_BOOTSTRAP="${SOURCE_DIR}/build_bootstrap.sh"
	export AHEAD_SCRIPT_BLDSRC="${SOURCE_DIR}/build_sources.sh"
	export AHEAD_SCRIPT_GENSSB="${SOURCE_DIR}/generate_ssbdata.sh"
	export AHEAD_SCRIPT_GENSSB_EXECUTABLE="${AHEAD_BUILD_RELEASE_DIR}/ssbm-dbsize_scalar"
	export AHEAD_SCRIPT_CODBEN="${SOURCE_DIR}/coding_benchmark.sh"
	export AHEAD_SCRIPT_MODINV="${SOURCE_DIR}/modular_inverse.sh"
	export AHEAD_SCRIPT_TURBOBOOST="${SOURCE_DIR}/turboboost.sh"
	export AHEAD_SCRIPT_GOVERNOR="${SOURCE_DIR}/scalinggovernor.sh"

	######################################################
	# The following helper functions calls               #
	# scalinggovernor.sh and turboboost.sh               #
	######################################################
	AHEAD_prepare_scalinggovernor_and_turboboost () {
		if [[ -z ${reproscript+x} ]]; then
			echo "###########################################################"
			echo "# For the following tests, for better reproducibilty, we: #"
			echo "#   * DISABLE turboboost                                  #"
			echo "#   * set the OS scaling governor to PERFORMANCE          #"
			echo "#                                                         #"
			echo "# For that, you need a sudoer account!                    #"
			echo "#                                                         #"
			echo -n "#   * turboboost: "
			sudo "${AHEAD_SCRIPT_TURBOBOOST}" disable && echo "succeeded.                              #" || echo "failed.                                 #"
			echo -n "#   * scaling governor: "
			modes=($(sudo "${AHEAD_SCRIPT_GOVERNOR}" avail 0))
			hasperformance=0
			for mode in "${modes[@]}"; do
				if [[ "${mode}" == performance ]]; then
					hasperformance=1
					sudo "${AHEAD_SCRIPT_GOVERNOR}" set performance && echo "succeeded.                        #" || echo "failed.                           #"
					break
				fi
			done
			[[ $hasperformance == 0 ]] && echo "failed. Did not find governor.    #"
			echo "###########################################################"
			echo
		fi
	}
	export -f AHEAD_prepare_scalinggovernor_and_turboboost
else
	echo "common.conf already sourced!"
fi
