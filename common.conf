# this config file contains some common settings for the AHEAD benchmarking, used by several scripts

if [[ -z ${AHEAD_COMMON_CONF+x} ]]; then

	######################################################
	# Function to print something and exit.              #
	# Expects the return code as FIRST argument!         #
	######################################################
	AHEAD_exit () {
		ret=$1
		shift
		echo "$@"
		exit $ret
	}
	export -f AHEAD_exit

	######################################################
	# Pretty printing.                                   #
	######################################################
	export AHEAD_SCRIPT_COMMAND_DEPTH=
	export AHEAD_SCRIPT_ECHO_INDENT=

	AHEAD_sub_begin () {
		((++AHEAD_SCRIPT_COMMAND_DEPTH))
		local line
		printf -v line '%*s' "$(( AHEAD_SCRIPT_COMMAND_DEPTH * 2 ))"
		export AHEAD_SCRIPT_ECHO_INDENT=" ${line// / }* "
		[[ ! -z ${MOREVERBOSE+x} ]] && AHEAD_echo "Depth=${AHEAD_SCRIPT_COMMAND_DEPTH}. Prefix='${AHEAD_SCRIPT_ECHO_INDENT}'"
		return 0
	}
	export -f AHEAD_sub_begin

	AHEAD_sub_end () {
		((AHEAD_SCRIPT_COMMAND_DEPTH <= 0)) && AHEAD_exit 1 "${AHEAD_SCRIPT_ECHO_INDENT}Bash script 'AHEAD_sub_end' called too often!"
		((--AHEAD_SCRIPT_COMMAND_DEPTH))
		local line
		printf -v line '%*s' "$(( AHEAD_SCRIPT_COMMAND_DEPTH * 2 ))"
		export AHEAD_SCRIPT_ECHO_INDENT=" ${line// / }* "
		[[ ! -z ${MOREVERBOSE+x} ]] && AHEAD_echo "Depth=${AHEAD_SCRIPT_COMMAND_DEPTH}. Prefix='${AHEAD_SCRIPT_ECHO_INDENT}'"
		return 0
	}
	export -f AHEAD_sub_end

	AHEAD_sub_reset () {
		((AHEAD_SCRIPT_COMMAND_DEPTH = 0))
		local line
		printf -v line '%*s' "$(( AHEAD_SCRIPT_COMMAND_DEPTH * 2 ))"
		export AHEAD_SCRIPT_ECHO_INDENT=" ${line// / }* "
		[[ ! -z ${MOREVERBOSE+x} ]] && AHEAD_echo "Depth=${AHEAD_SCRIPT_COMMAND_DEPTH}. Prefix='${AHEAD_SCRIPT_ECHO_INDENT}'"
		return 0
	}
	export -f AHEAD_sub_reset

	AHEAD_echo () {
		local switches
		(($# == 0)) && AHEAD_echo "Error! bash function 'AHEAD_echo' called with 0 arguments, but at least 1 expected (the target script or executable)!" && exit 1
		if (($# > 1)); then
			until (($# == 1)); do
				arg=$1
				if [[ ${arg:0:1} == "-" ]]; then
					switches+=("${arg}")
					shift
				else
					break
				fi
			done
		fi
		echo "${switches[@]}" "${AHEAD_SCRIPT_ECHO_INDENT}$@"
	}
	export -f AHEAD_echo

	### "Initialize" pretty printing
	AHEAD_sub_reset

	export AHEAD_COMMON_CONF=""
	SOURCE_DIR_COMMON="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null && pwd )"
	AHEAD_echo "Sourcing '${SOURCE_DIR_COMMON}/common.conf'"

	######################################################
	# Settings for the SSB data generation               #
	######################################################
	export SSB_DBGEN_SUBMODULE=ssb-dbgen
	export SSB_DBGEN_GITREPO=https://github.com/valco1994/ssb-dbgen
	export SSB_DBGEN_BUILDIR=build

	######################################################
	# Settings for executing AHEAD (SSB)                 #
	######################################################
	AHEAD_sub_begin
	# Allow to externally set the AHEAD_DATE variable!
	[[ -z ${AHEAD_DATE+x} ]] && export AHEAD_DATE="$(date '+%Y-%m-%d_%H-%M')"
	if which systemd-detect-virt &>/dev/null ; then
		systemd-detect-virt &>/dev/null && export AHEAD_IS_VM=1 || export AHEAD_IS_VM=0
	elif which dmesg &>/dev/null; then
		dmesg | grep -q "Hypervisor detected" && export AHEAD_IS_VM=1 || export AHEAD_IS_VM=0
	else
		# fallback variant -- just assume VM...
		AHEAD_IS_VM=1
	fi
	((AHEAD_IS_VM == 1)) && AHEAD_echo "detected VM"
	export AHEAD_PREVIOUS_DATE_FILE="${SOURCE_DIR_COMMON}/date.prev"
	# Let's simply only enable PCM when not in a virtual machine, because the dependant code will not run therein anyways
	export AHEAD_USE_PCM=$((AHEAD_IS_VM == 1 ? 0 : 1))
	export AHEAD_DB_PATH="${SOURCE_DIR_COMMON}/database"
	export AHEAD_SCALEFACTOR_PREFIX="sf-"
	### The following must be overwritable for the minbfw experiments
	[[ -z ${AHEAD_SCALEFACTOR_MIN+x} ]] && export AHEAD_SCALEFACTOR_MIN="1"
	[[ -z ${AHEAD_SCALEFACTOR_MAX+x} ]] && export AHEAD_SCALEFACTOR_MAX="10"

	export AHEAD_BUILD_BASE_DIR="${SOURCE_DIR_COMMON}/build"
	export AHEAD_BUILD_DEBUG_DIR="${AHEAD_BUILD_BASE_DIR}/Debug"
	export AHEAD_BUILD_RELEASE_DIR="${AHEAD_BUILD_BASE_DIR}/Release"

	export AHEAD_SCALAR_VS_VECTOR_SCALEFACTOR=1
	export AHEAD_SCALAR_VS_VECTOR_QUERIES="(11 12 13)"
	export AHEAD_SCALAR_VS_VECTOR_VARIANT_INDICES="(0 4)"
	export AHEAD_SCALAR_VS_VECTOR_YMIN=0
	export AHEAD_SCALAR_VS_VECTOR_YMAX=3

	export AHEAD_MINBFW_SUFFIX="-minbfw"
	export AHEAD_MINBFW_SCALEFACTOR="1"
	export AHEAD_MINBFW_MIN="1"
	export AHEAD_MINBFW_MAX="4"
	export AHEAD_MINBFW_CMDARG="--AN-minbfw"

	export AHEAD_PAPER_PATH="${SOURCE_DIR_COMMON}/paper"
	export AHEAD_PAPER_RESULTS="${AHEAD_PAPER_PATH}/results"
	export AHEAD_PAPER_RESULTS_SSB="${AHEAD_PAPER_RESULTS}/ssb"
	export AHEAD_PAPER_RESULTS_MB="${AHEAD_PAPER_RESULTS}/microbenchmarks"
	export AHEAD_PAPER_RESULTS_CB="${AHEAD_PAPER_RESULTS}/microbenchmarks"
	export AHEAD_PAPER_RESULTS_MI="${AHEAD_PAPER_RESULTS}/microbenchmarks/ext_euclidean"

	export PATH_MINBFW_RUNTIME_BASENAME="minbfw_runtime"
	export PATH_MINBFW_RUNTIME_GNUPLOTFILE="${AHEAD_PAPER_RESULTS_SSB}/${PATH_MINBFW_RUNTIME_BASENAME}.m"
	export PATH_MINBFW_RUNTIME_DATAFILE="${AHEAD_PAPER_RESULTS_SSB}/${PATH_MINBFW_RUNTIME_BASENAME}.data"
	export PATH_MINBFW_CONSUMPTION_BASENAME="minbfw_consumption"
	export PATH_MINBFW_CONSUMPTION_GNUPLOTFILE="${AHEAD_PAPER_RESULTS_SSB}/${PATH_MINBFW_CONSUMPTION_BASENAME}.m"
	export PATH_MINBFW_CONSUMPTION_DATAFILE="${AHEAD_PAPER_RESULTS_SSB}/${PATH_MINBFW_CONSUMPTION_BASENAME}.data"

	export PATH_CODBENCH_ENCODE_GNUPLOTFILE="${AHEAD_PAPER_RESULTS_CB}/plot_encode_avx2.m"
	export PATH_CODBENCH_CHECK_GNUPLOTFILE="${AHEAD_PAPER_RESULTS_CB}/plot_check_avx2.m"
	export PATH_CODBENCH_DECODE_GNUPLOTFILE="${AHEAD_PAPER_RESULTS_CB}/plot_decode_avx2.m"
	export PATH_CODBENCH_LABELS_GNUPLOTFILE="${AHEAD_PAPER_RESULTS_CB}/plot_labels.m"

	export PATH_MODINV_GNUPLOTFILE="${AHEAD_PAPER_RESULTS_MI}/TestModuloInverseComputation2.m"

	# WARNING: If you want to change the following, make sure to change the respective occurrences throughout this project, e.g. in the CMakeLists.txt files
	export AHEAD_RESTINY32_SUFFIX="_restiny32"

	######################################################
	# Names of the scripts to call                       #
	######################################################
	export AHEAD_SCRIPT_BOOTSTRAP="${SOURCE_DIR_COMMON}/build_bootstrap.sh"
	export AHEAD_SCRIPT_BLDSRC="${SOURCE_DIR_COMMON}/build_sources.sh"
	export AHEAD_SCRIPT_GENSSB="${SOURCE_DIR_COMMON}/generate_ssbdata.sh"
	export AHEAD_SCRIPT_GENSSB_EXECUTABLE="ssbm-dbsize_scalar"
	export AHEAD_SCRIPT_GENSSB_EXECUTABLE_PATH="${AHEAD_BUILD_RELEASE_DIR}/${AHEAD_SCRIPT_GENSSB_EXECUTABLE}"
	export AHEAD_SCRIPT_CODBEN="${SOURCE_DIR_COMMON}/coding_benchmark.sh"
	export AHEAD_SCRIPT_MODINV="${SOURCE_DIR_COMMON}/modular_inverse.sh"
	export AHEAD_SCRIPT_TURBOBOOST="${SOURCE_DIR_COMMON}/turboboost.sh"
	export AHEAD_SCRIPT_GOVERNOR="${SOURCE_DIR_COMMON}/scalinggovernor.sh"

	######################################################
	# Function to encapsulate pushd verbosity.           #
	######################################################
	AHEAD_pushd () {
		(($# != 1)) && AHEAD_echo "Error! bash function 'AHEAD_pushd' called with ${#@} arguments, but exactly 1 expected (the pushd target)!" && exit 1
		[[ ! -z ${VERBOSE+x} ]] && { AHEAD_echo -n "pushd: "; pushd "$1"; } || pushd "$1" &>/dev/null
	}
	export -f AHEAD_pushd

	######################################################
	# Function to encapsulate popd verbosity.            #
	######################################################
	AHEAD_popd () {
		(($# != 0)) && AHEAD_echo "Error! bash function 'AHEAD_popd' called with ${#@} arguments, but exactly 0 expected!" && exit 1
		[[ ! -z ${VERBOSE+x} ]] && { AHEAD_echo -n "popd: "; popd; } || popd &>/dev/null
	}
	export -f AHEAD_popd

	######################################################
	# When SYNCing file in a VM, we get nasty problems,  #
	# so we add some SLEEPing when inside a VM. This     #
	# fixed the issue for us.                            #
	# All arguments are passed to 'sync'                 #
	######################################################
	AHEAD_sync () {
		if ((AHEAD_IS_VM == 1)); then
			AHEAD_echo -n "SYNCing files (VM mode)..." && sleep 2 && sync "$@" && sleep 2 && echo " Done.";
		else
			# Unfortunately, it seems that we must force some wait time even in non-VM mode!
			AHEAD_echo -n "SYNCing files..." && sleep 1 && sync "$@" && echo " Done."
		fi
	}
	export -f AHEAD_sync

	######################################################
	# Function to capture the output in a temporary file #
	# and print the contents only upon an error.         #
	# The function assumes, that some "echo -n" output   #
	# was previously issued and that we can end the line #
	# with an "echo Error" or "echo Done".               #
	######################################################
	AHEAD_run_hidden_output () {
		local ret
		(($# == 0)) && AHEAD_echo "Error! bash function 'AHEAD_run_hidden_output' called with 0 arguments, but at least 1 expected (the target script or executable)!" && exit 1
		t=$(tempfile) || exit 1
		trap "echo ' Error!'; cat '$t'; rm -f -- '$t'" EXIT
		CMD="$1"
		shift
		if [[ -z "${VERBOSE+x}" ]] || ((VERBOSE == 0)); then 
			"${CMD}" "$@" &>"$t"
			ret=$?
		else
			"${CMD}" "$@" > >(tee -a "$t") 2> >(tee -a "$t" >&2)
			ret=$?
		fi
		if ((ret==0)); then
			echo " Done."
		else
			echo ' Error!'
			cat "$t"
		fi
		rm -f -- "$t"
		trap - EXIT
		return $ret
	}
	export -f AHEAD_run_hidden_output

	######################################################
	# The following helper functions calls               #
	# scalinggovernor.sh and turboboost.sh               #
	######################################################
	AHEAD_prepare_scalinggovernor_and_turboboost () {
		if [[ -z ${reproscript+x} ]]; then
			echo "###########################################################"
			echo "# For the following tests, for better reproducibilty, we: #"
			echo "#   * DISABLE turboboost                                  #"
			echo "#   * set the OS scaling governor to PERFORMANCE          #"
			echo "#                                                         #"
			echo "# For that, you need a sudoer account!                    #"
			echo "#                                                         #"
			echo -n "#   * turboboost: "
			sudo "${AHEAD_SCRIPT_TURBOBOOST}" disable &>/dev/null && echo "succeeded.                              #" || echo "failed.                                 #"
			echo -n "#   * scaling governor: "
			modes=($(sudo "${AHEAD_SCRIPT_GOVERNOR}" avail 0))
			hasperformance=0
			for mode in "${modes[@]}"; do
				if [[ "${mode}" == performance ]]; then
					hasperformance=1
					sudo "${AHEAD_SCRIPT_GOVERNOR}" set performance && echo "succeeded.                        #" || echo "failed.                           #"
					break
				fi
			done
			[[ $hasperformance == 0 ]] && echo "failed. Did not find governor.    #"
			echo "###########################################################"
			echo
		fi
	}
	export -f AHEAD_prepare_scalinggovernor_and_turboboost

	AHEAD_sub_end
elif [[ ! -z ${VERBOSE+x} ]]; then
	SOURCE_DIR_COMMON="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null && pwd )"
	AHEAD_echo "Already sourced '${SOURCE_DIR_COMMON}/common.conf'!"
fi
