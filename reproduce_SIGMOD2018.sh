#!/bin/bash

# This script is an all-in-one solution to reproduce the results from our SIGMOD 2018 paper titled "AHEAD: Adaptable Data Hardening for On-the-Fly Hardware Error Detection during Database Query Processing"

if [[ $(id -u) -eq 0 ]]; then
	echo "[ERROR] You must not run this script as super user!"
	exit 1
fi

# Allow to run individual steps
ARGS=("$@")
if [[ $# > 0 ]] ; then
	PHASE="${ARGS[0]}"
	case "${ARGS[0]}" in
		GENERATE)
			DO_GENERATE=1
			DO_SSB=0
			DO_CODINGBENCHMARK=0
			DO_MODULARINVERSE=0
			;;
		SSB)
			DO_GENERATE=0
			DO_SSB=1
			DO_CODINGBENCHMARK=0
			DO_MODULARINVERSE=0
			;;
		CB)
			DO_GENERATE=0
			DO_SSB=0
			DO_CODINGBENCHMARK=1
			DO_MODULARINVERSE=0
			;;
		INV)
			DO_GENERATE=0
			DO_SSB=0
			DO_CODINGBENCHMARK=0
			DO_MODULARINVERSE=1
			;;
		ALL) ;&
		DEFAULT) ;&
		*)
			PHASE="ALL"
			;;
	esac
fi

[[ -z "${PHASE+x}" ]] && PHASE=ALL

# set the step switches if not done yet
[ -z ${DO_GENERATE+x} ] && DO_GENERATE=1
[ -z ${DO_SSB+x} ] && DO_SSB=1
[ -z ${DO_CODINGBENCHMARK+x} ] && DO_CODINGBENCHMARK=1
[ -z ${DO_MODULARINVERSE+x} ] && DO_MODULARINVERSE=1

echo "######################################################"
echo "# Welcome to the SIGMOD 2018 reproducibility script. #"
echo "######################################################"
echo

echo "######################################################"
echo "# Initializing, syncing and updating git submodules. #"
echo "######################################################"
echo
git submodule update --init --recursive
git submodule sync --recursive
git submodule update --recursive

source "$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)/eval/run.conf"

if [[ ${DO_GENERATE} == 1 ]]; then
	echo "###########################################################"
	echo "# Running Star Schema Benchmark Data Generation           #"
	echo "###########################################################"
	./generate_ssbdata.sh || exit 1
	echo
fi

AHEAD_prepare_scalinggovernor_and_turboboost

export reproscript=1

if [[ ${DO_SSB} == 1 ]]; then
	echo "###########################################################"
	echo "# Running Star Schema Benchmark                           #"
	echo "###########################################################"
	pushd eval &>/dev/null
	#export AHEAD_DATE="2018-08-15_17-04" # for testing
	./run.sh || exit 1
	# Link the report files generated by eval/run.sh script to the paper result SSB folder
	ln -fs "${PATH_EVALDATA}" "${AHEAD_PAPER_RESULTS_SSB}/data"
	ln -fs "${PATH_EVALREPORT}" "${AHEAD_PAPER_RESULTS_SSB}/report"
	ln -fs "${PATH_EVALINTER}" "${AHEAD_PAPER_RESULTS_SSB}/intermediate"
	for f in $(ls ${PATH_EVALREPORT}/${PATH_TEASER_RUNTIME_BASENAME}* ; ls ${PATH_EVALREPORT}/${PATH_TEASER_CONSUMPTION_BASENAME}* ; ${PATH_EVALREPORT}/${PATH_TEASER_LEGEND_BASENAME}*); do
		link="${AHEAD_PAPER_RESULTS_SSB}/$(basename -s '' ${f})"
		echo "  * linking '${f}' <- '${link}'"
		ln -fs "${f}" "${link}"
	done
	popd &>/dev/null
	echo
fi

if [[ ${DO_CODINGBENCHMARK} == 1 ]]; then
	bash ${AHEAD_SCRIPT_CODBEN}
fi

if [[ ${DO_MODULARINVERSE} == 1 ]]; then
	bash ${AHEAD_SCRIPT_MODINV}
fi

echo "###########################################################"
echo "# Generating simgod2018.pdf                               #"
echo "###########################################################"
pushd ${AHEAD_PAPER_PATH} &>/dev/null
(pdflatex sigmod2018.tex &>/dev/null && pdflatex sigmod2018.tex &>/dev/null && pdflatex sigmod2018.tex &>/dev/null) || exit 1
printf '\n\nDone. You can re-compile the paper by calling "pdflatex sigmod2018.tex" in subfolder "paper"\n'
popd &>/dev/null

exit 0

