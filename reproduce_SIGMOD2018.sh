#!/bin/bash

# This script is an all-in-one solution to reproduce the results from our SIGMOD 2018 paper titled "AHEAD: Adaptable Data Hardening for On-the-Fly Hardware Error Detection during Database Query Processing"

if [[ $(id -u) -eq 0 ]]; then
	echo "[ERROR] You must not run this script as super user!"
	exit 1
fi

# Allow to run individual steps
ARGS=("$@")
if [[ $# > 0 ]] ; then
	PHASE="${ARGS[0]}"
	case "${ARGS[0]}" in
		GENERATE)
			DO_GENERATE=1
			DO_SSB=0
			DO_CODINGBENCHMARK=0
			DO_MODULARINVERSE=0
			;;
		SSB)
			DO_GENERATE=0
			DO_SSB=1
			DO_CODINGBENCHMARK=0
			DO_MODULARINVERSE=0
			;;
		CB)
			DO_GENERATE=0
			DO_SSB=0
			DO_CODINGBENCHMARK=1
			DO_MODULARINVERSE=0
			;;
		INV)
			DO_GENERATE=0
			DO_SSB=0
			DO_CODINGBENCHMARK=0
			DO_MODULARINVERSE=1
			;;
		NOBENCH)
			NO_BENCH=1
			;;
		ALL) ;&
		DEFAULT) ;&
		*)
			PHASE="ALL"
			;;
	esac
fi

[[ -z "${PHASE+x}" ]] && PHASE=ALL

# set the step switches if not done yet
[ -z ${DO_GENERATE+x} ] && DO_GENERATE=1
[ -z ${DO_SSB+x} ] && DO_SSB=1
[ -z ${DO_CODINGBENCHMARK+x} ] && DO_CODINGBENCHMARK=1
[ -z ${DO_MODULARINVERSE+x} ] && DO_MODULARINVERSE=1
[ -z ${NO_BENCH+x} ] && NO_BENCH=0

echo "######################################################"
echo "# Welcome to the SIGMOD 2018 reproducibility script. #"
echo "######################################################"
echo
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)/common.conf"
AHEAD_sub_begin
echo "${AHEAD_SCRIPT_COMMAND_PREFIX}Running Phase \"${PHASE}\""
AHEAD_sub_end
echo

echo "######################################################"
echo "# Initializing, syncing and updating git submodules. #"
echo "######################################################"
echo
AHEAD_sub_begin
echo -n "${AHEAD_SCRIPT_COMMAND_PREFIX}git submodule update --init --recursive..."
AHEAD_run_hidden_output git submodule update --init --recursive || exit 1
echo -n "${AHEAD_SCRIPT_COMMAND_PREFIX}git submodule sync --recursive..."
AHEAD_run_hidden_output git submodule sync --recursive || exit 1
echo -n "${AHEAD_SCRIPT_COMMAND_PREFIX}git submodule update --recursive..."
AHEAD_run_hidden_output git submodule update --recursive || exit 1
AHEAD_sync
AHEAD_sub_end

if ((DO_GENERATE == 1)) && ((NO_BENCH == 0)); then
	echo "###########################################################"
	echo "# Running Star Schema Benchmark Data Generation           #"
	echo "###########################################################"
	AHEAD_sub_begin
	./generate_ssbdata.sh || exit 1
	AHEAD_sync
	AHEAD_sub_reset
	echo
fi

AHEAD_prepare_scalinggovernor_and_turboboost

export reproscript=1

if [[ ${DO_SSB} == 1 ]]; then
	echo "###########################################################"
	echo "# Running Star Schema Benchmark                           #"
	echo "###########################################################"
	AHEAD_sub_begin
	AHEAD_pushd "eval"

	if [[ -z ${NO_BENCH+x} ]] || ((NO_BENCH == 0)); then
		./run.sh || exit 1
		echo -n "${AHEAD_DATE}" >"${AHEAD_PREVIOUS_DATE_FILE}"
	else
		if [[ ! -f "${AHEAD_PREVIOUS_DATE_FILE}" ]]; then
			echo " * WARNING: It seems that there is no previous run of AHEAD, because \"${AHEAD_PREVIOUS_DATE_FILE}\" does not exist.\n   Please, either first run this reproducibility script at least once, or create the file with appropriate contents in the format yyyy-MM-dd_HH-mm, e.g. 2018-09-13_17-50 !" >&2
			exit 1
		fi
		export AHEAD_DATE=$(cat "${AHEAD_PREVIOUS_DATE_FILE}")
		[[ ! -z ${VERBOSE+x} ]] && echo " * AHEAD_DATE=${AHEAD_DATE}"
		[[ ! -z ${VERBOSE+x} ]] && echo " * PATH_EVAL_CURRENT=${PATH_EVAL_CURRENT}"
		source run.conf
		[[ ! -z ${VERBOSE+x} ]] && echo " * AHEAD_DATE=${AHEAD_DATE}"
		[[ ! -z ${VERBOSE+x} ]] && echo " * PATH_EVAL_CURRENT=${PATH_EVAL_CURRENT}"
	fi

	# Link the report files generated by eval/run.sh script to the paper result SSB folder
	AHEAD_sync
	[[ ! -z ${VERBOSE+x} ]] && echo "${AHEAD_SCRIPT_COMMAND_PREFIX}PWD: '$(pwd)'"
	echo "${AHEAD_SCRIPT_COMMAND_PREFIX}Creating symlinks"
	AHEAD_sub_begin
	echo "${AHEAD_SCRIPT_COMMAND_PREFIX}linking '${PATH_EVALDATA}' <- '${AHEAD_PAPER_RESULTS_SSB}/data'" && ln -fs "${PATH_EVALDATA}" "${AHEAD_PAPER_RESULTS_SSB}/data"
	echo "${AHEAD_SCRIPT_COMMAND_PREFIX}linking '${PATH_EVALREPORT}' <- '${AHEAD_PAPER_RESULTS_SSB}/report'" && ln -fs "${PATH_EVALREPORT}" "${AHEAD_PAPER_RESULTS_SSB}/report"
	echo "${AHEAD_SCRIPT_COMMAND_PREFIX}linking '${PATH_EVALINTER}' <- '${AHEAD_PAPER_RESULTS_SSB}/intermediate'" && ln -fs "${PATH_EVALINTER}" "${AHEAD_PAPER_RESULTS_SSB}/intermediate"
	find "$(pwd)" \( -iname "${PATH_TEASER_RUNTIME_BASENAME}"'*' -o -iname "${PATH_TEASER_CONSUMPTION_BASENAME}"'*' -o -iname "${PATH_TEASER_LEGEND_BASENAME}"'*' -o -iname "${PATH_SCALAR_VS_VECTOR_BASENAME}"'*' \) -print0 | \
		xargs -0 -I file bash -c "link=\"${AHEAD_PAPER_RESULTS_SSB}/\$(basename 'file')\"; echo \" * linking 'file' <- '\${link}'\"; rm -f \"\${link}\"; ln -s \"file\" \"\${link}\""
	AHEAD_sub_end
	AHEAD_popd
	echo
	AHEAD_sync
	AHEAD_sub_reset
fi

if [[ ${DO_CODINGBENCHMARK} == 1 ]]; then
	echo "###########################################################"
	echo "# Running Coding Benchmark                                #"
	echo "###########################################################"
	echo

	AHEAD_sub_begin
	if [[ -z ${NO_BENCH+x} ]] || ((NO_BENCH == 0)); then
		bash ${AHEAD_SCRIPT_CODBEN}
	fi

	# gnuplot the results
	AHEAD_pushd "${AHEAD_PAPER_RESULTS_MB}" && gnuplot plot_check_avx2.m && gnuplot plot_decode_avx2.m && gnuplot plot_encode_avx2.m && gnuplot plot_labels.m
	AHEAD_popd
	AHEAD_sync
	AHEAD_sub_reset
fi

if [[ ${DO_MODULARINVERSE} == 1 ]]; then
	echo "###########################################################"
	echo "# Running Modular Inverse Benchmark                       #"
	echo "###########################################################"
	echo

	AHEAD_sub_begin
	if [[ -z ${NO_BENCH+x} ]] || ((NO_BENCH == 0)); then
		bash ${AHEAD_SCRIPT_MODINV}
	fi

	# gnuplot the results
	AHEAD_pushd "${AHEAD_PAPER_RESULTS_MI}" && gnuplot "${MI_SCRIPTFILE}" && echo " * Plotted graphs" || echo " * Error plotting graphs!"
	AHEAD_popd
	AHEAD_sync
	AHEAD_sub_reset
fi

echo "###########################################################"
echo "# Generating simgod2018.pdf                               #"
echo "###########################################################"
AHEAD_sub_begin
AHEAD_pushd ${AHEAD_PAPER_PATH}
(pdflatex sigmod2018.tex && pdflatex sigmod2018.tex && pdflatex sigmod2018.tex) || exit 1
printf '\n\nDone. You can re-compile the paper by calling "pdflatex sigmod2018.tex" in subfolder "paper"\n'
AHEAD_popd
AHEAD_sync
AHEAD_sub_reset

exit 0
